{"version":3,"sources":["dom/forms.js"],"names":["DOM","require","FS","Mime","Path","idlUtils","domSymbolTree","HTMLInputElementImpl","File","constructor","filename","mime","getType","read","readFileSync","valueOf","toString","basename","uploadedFile","HTMLFormElement","prototype","submit","button","form","document","ownerDocument","params","addFieldValues","fieldName","values","current","get","next","concat","set","addFieldToParams","field","getAttribute","name","nodeName","selected","options","filter","option","map","value","multiple","length","type","checked","addButtonToParams","defaultView","_submit","url","location","href","method","encoding","target","process","index","elements","item","implementation","_preClickActivationSteps","_dispatchSubmitEvent","event","createEvent","initEvent","_button","inputElementImpl","implForWrapper","bodyElementImpl","parent","dispatchResult","dispatchEvent","HTMLInputElement","click","input","focus","clickEvent","labelElementImpl","_click","original","checkResult","radios","querySelectorAll","radio","radioResult","forEach","HTMLButtonElement","defaultPrevented","change","changeEvent","reset"],"mappings":"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","file":"forms.js","sourcesContent":["// Patches to JSDOM for properly handling forms.\nconst DOM   = require('./index');\nconst FS    = require('fs');\nconst Mime  = require('mime');\nconst Path  = require('path');\nconst { idlUtils, domSymbolTree, HTMLInputElementImpl }    = require('./impl');\n\n\n// The Form\n// --------\n\nclass File {\n\n  constructor(filename) {\n    this.filename = filename;\n    this.mime     = Mime.getType(filename);\n  }\n\n  read() {\n    return FS.readFileSync(this.filename);\n  };\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return Path.basename(this.filename);\n  }\n\n}\n\n\n// Forms convert INPUT fields of type file into this object and pass it as\n// parameter to resource request.\n//\n// The base class is a String, so the value (e.g. when passed in a GET request)\n// is the base filename.  Additional properties include the MIME type (`mime`),\n// the full filename (`filename`) and the `read` method that returns the file\n// contents.\nfunction uploadedFile(filename) {\n  return new File(filename);\n}\n\n\n// Implement form.submit such that it actually submits a request to the server.\n// This method takes the submitting button so we can send the button name/value.\nDOM.HTMLFormElement.prototype.submit = function(button) {\n  const form      = this;\n  const document  = form.ownerDocument;\n  const params    = new Map();\n\n  function addFieldValues(fieldName, values) {\n    const current = (params.get(fieldName) || []);\n    const next    = current.concat(values);\n    params.set(fieldName, next);\n  }\n\n  function addFieldToParams(field) {\n    if (field.getAttribute('disabled'))\n      return;\n\n    const name = field.getAttribute('name');\n    if (!name)\n      return;\n\n    if (field.nodeName === 'SELECT') {\n      const selected = Array.from(field.options)\n        .filter(option  => option.selected)\n        .map(options    => options.value);\n\n      if (field.multiple)\n        addFieldValues(name, selected);\n      else {\n        const value = (selected.length > 0) ?\n          selected[0] :\n          (field.options.length && field.options[0].value);\n        addFieldValues(name, [ value ]);\n      }\n      return;\n    }\n\n    if (field.nodeName === 'INPUT' && (field.type === 'checkbox' || field.type === 'radio')) {\n      if (field.checked) {\n        const value   = field.value || '1';\n        addFieldValues(name, [ value ]);\n      }\n      return;\n    }\n\n    if (field.nodeName === 'INPUT' && field.type === 'file') {\n      if (field.value) {\n        const value   = uploadedFile(field.value);\n        addFieldValues(name, [ value ]);\n      }\n      return;\n    }\n\n    if (field.nodeName === 'TEXTAREA' || field.nodeName === 'INPUT') {\n      if (field.type !== 'submit' && field.type !== 'image')\n        addFieldValues(name, [ field.value ]);\n      return;\n    }\n  }\n\n  function addButtonToParams() {\n    if (button.nodeName === 'INPUT' && button.type === 'image') {\n      addFieldValues(button.name + '.x', [ '0' ]);\n      addFieldValues(button.name + '.y', [ '0' ]);\n\n      if (button.value)\n        addFieldValues(button.name, [ button.value ]);\n    } else\n      addFieldValues(button.name, [ button.value ]);\n  }\n\n  function submit() {\n    if (button && button.name)\n      addButtonToParams();\n\n    // Ask window to submit form, let it figure out how to handle this based on\n    // the target attribute.\n    document.defaultView._submit({\n      url:      form.getAttribute('action') || document.location.href,\n      method:   form.getAttribute('method') || 'GET',\n      encoding: form.getAttribute('enctype'),\n      params:   params,\n      target:   form.getAttribute('target')\n    });\n  }\n\n  function process(index) {\n    const field = form.elements.item(index);\n    if (!field) {\n      submit();\n      return;\n    }\n    addFieldToParams(field);\n    process(index + 1);\n  }\n\n  process(0);\n};\n\n// override input.checked being set in jsdom, we set in manually in zombie\nHTMLInputElementImpl.implementation.prototype._preClickActivationSteps = function(){};\n\n\n\n\n// Replace dispatchEvent so we can send the button along the event.\nDOM.HTMLFormElement.prototype._dispatchSubmitEvent = function(button) {\n  const event = this.ownerDocument.createEvent('HTMLEvents');\n  event.initEvent('submit', true, true);\n  event._button = button;\n  const inputElementImpl = idlUtils.implForWrapper(event._button);\n  const bodyElementImpl = domSymbolTree.parent(domSymbolTree.parent(inputElementImpl));\n  const dispatchResult = this.dispatchEvent(event);\n  dispatchResult && this._submit(event);\n  return dispatchResult;\n};\n\n\n// Default behavior for submit events is to call the form's submit method, but we\n// also pass the submitting button.\nDOM.HTMLFormElement.prototype._submit = function(event) {\n  event.target.submit(event._button);\n};\n\n\n// Buttons\n// -------\n\n// Current INPUT behavior on click is to capture sumbit and handle it, but\n// ignore all other clicks. We need those other clicks to occur, so we're going\n// to dispatch them all.\nDOM.HTMLInputElement.prototype.click = function() {\n  const input = this;\n  input.focus();\n\n  // First event we fire is click event\n  function click() {\n    const clickEvent = input.ownerDocument.createEvent('HTMLEvents');\n    clickEvent.initEvent('click', true, true);\n    const labelElementImpl = domSymbolTree.parent(idlUtils.implForWrapper(input));\n    const dispatchResult = input.dispatchEvent(clickEvent);\n    input._click && input._click(clickEvent);\n    return dispatchResult;\n  }\n\n  switch (input.type) {\n    case 'checkbox': {\n      if (input.getAttribute('readonly'))\n        break;\n\n      const original    = input.checked;\n      input.checked     = !original;\n      const checkResult = click();\n      if (checkResult === false)\n        input.checked = original;\n      break;\n    }\n\n    case 'radio': {\n      if (input.getAttribute('readonly'))\n        break;\n\n      if (input.checked)\n        click();\n      else {\n        const radios = input.ownerDocument.querySelectorAll(`input[type=radio][name='${this.getAttribute('name')}']`);\n        const checked = Array.from(radios)\n          .filter(radio   => radio.checked && radio.form === this.form )\n          .map(radio  => {\n            radio.checked = false;\n          })[0];\n\n        input.checked = true;\n        const radioResult = click();\n        if (radioResult === false) {\n          input.checked = false;\n          Array.from(radios)\n            .filter(radio   => radio.form === input.form )\n            .forEach(radio  => {\n              radio.checked = (radio === checked);\n            });\n        }\n      }\n      break;\n    }\n\n    default: {\n      click();\n      break;\n    }\n  }\n};\n\n\n// HTMLForm listeners\nDOM.HTMLButtonElement.prototype._click = function(event) {\n  if (event.defaultPrevented) return;\n  const button = event.target;\n  if (button.getAttribute('disabled'))\n    return false;\n\n  const form = button.form;\n  if (form)\n    return form._dispatchSubmitEvent(button);\n};\n\nDOM.HTMLInputElement.prototype._click = function(event) {\n  if (event.defaultPrevented) return;\n\n  const input = event.target;\n\n  function change() {\n    const changeEvent = input.ownerDocument.createEvent('HTMLEvents');\n    changeEvent.initEvent('change', true, true);\n    input.dispatchEvent(changeEvent);\n  }\n\n  switch (input.type) {\n    case 'reset': {\n      if (input.form)\n        input.form.reset();\n      break;\n    }\n    case 'submit': {\n      if (input.form)\n        input.form._dispatchSubmitEvent(input);\n      break;\n    }\n    case 'image': {\n      if (input.form)\n        input.form._dispatchSubmitEvent(input);\n      break;\n    }\n    case 'checkbox': {\n      change();\n      break;\n    }\n    case 'radio': {\n      if (!input.getAttribute('readonly')) {\n        input.checked = true;\n        change();\n      }\n    }\n  }\n};\n\nconst _submit = function(event) {\n  event.target.submit(event._button);\n};\n"]}