{"version":3,"sources":["resources.js"],"names":["Fetch","require","Resource","constructor","request","error","response","url","dump","output","process","stdout","elapsed","time","write","method","status","statusText","_redirectCount","name","value","headers","sample","body","slice","toString","split","map","line","join","message","Date","Resources","Array","window","_browser","browser","_fetch","input","init","pipeline","Request","resource","push","then","catch","Response","length","forEach","module","exports"],"mappings":"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","file":"resources.js","sourcesContent":["// History of resources loaded by window.\n\nconst Fetch = require('./fetch');\n\n\n// Each resource is associated with request, and on completion response or error.\nclass Resource {\n\n  constructor({ request }) {\n    this.request  = request;\n    this.error    = null;\n    this.response = null;\n  }\n\n  // The URL of this resource\n  get url() {\n    return (this.response && this.response.url) || this.request.url;\n  }\n\n  // Dump the resource to output stream/stdout\n  dump(output = process.stdout) {\n    const { request, response, error } = this;\n    // Write summary request/response header\n    if (response) {\n      const elapsed = response.time - request.time;\n      output.write(`${request.method} ${this.url} - ${response.status} ${response.statusText} - ${elapsed}ms\\n`);\n    } else\n      output.write(`${request.method} ${this.url}\\n`);\n\n    // If response, write out response headers and sample of document entity\n    // If error, write out the error message\n    // Otherwise, indicate this is a pending request\n    if (response) {\n      if (response._redirectCount)\n        output.write(`  Followed ${response._redirectCount} redirects\\n`);\n      for (let [name, value] of response.headers)\n        output.write(`  ${name}: ${value}\\n`);\n      output.write('\\n');\n      const sample = response.body\n        .slice(0, 250)\n        .toString('utf8')\n        .split('\\n')\n        .map(line => `  ${line}`)\n        .join('\\n');\n      output.write(sample);\n    } else if (error)\n      output.write(`  Error: ${error.message}\\n`);\n    else\n      output.write(`  Pending since ${new Date(request.time)}\\n`);\n    // Keep them separated\n    output.write('\\n\\n');\n  }\n\n}\n\n\n// Each window has a resources object that provides the means for retrieving\n// resources and a list of all retrieved resources.\n//\n// The object is an array, and its elements are the resources.\nclass Resources extends Array {\n\n  constructor(window) {\n    super();\n    this._browser = window.browser;\n  }\n\n\n  _fetch(input, init) {\n    const pipeline  = this._browser.pipeline;\n    const request   = new Fetch.Request(input, init);\n    const resource  = new Resource({ request });\n    this.push(resource);\n\n    return pipeline\n      ._fetch(request)\n      .then(function(response) {\n        resource.response = response;\n        return response;\n      })\n      .catch(function(error) {\n        resource.error    = error;\n        resource.response = Fetch.Response.error();\n        throw error;\n      });\n  }\n\n\n  // Human readable resource listing.\n  //\n  // output - Write to this stream (optional)\n  dump(output = process.stdout) {\n    if (this.length === 0)\n      output.write('No resources\\n');\n    else\n      this.forEach(resource => resource.dump(output));\n  }\n\n}\n\n\n\nmodule.exports = Resources;\n\n"]}