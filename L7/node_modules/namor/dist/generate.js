"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var crypto_extra_1 = __importDefault(require("crypto-extra"));
var _data_1 = __importDefault(require("./_data"));
var Word;
(function (Word) {
    Word["Adjective"] = "adjectives";
    Word["Noun"] = "nouns";
    Word["Verb"] = "verbs";
})(Word || (Word = {}));
function randomFromArray(arr) {
    return arr[crypto_extra_1["default"].randomNumber({ max: arr.length - 1 })];
}
exports.randomFromArray = randomFromArray;
function getPattern(count) {
    switch (count) {
        case 0:
            return [];
        case 1:
            return [Word.Noun];
        case 3:
            return [Word.Adjective, Word.Noun, Word.Verb];
        case 4:
            return [Word.Adjective, Word.Noun, Word.Noun, Word.Verb];
        case 2:
        default:
            return randomFromArray([
                [Word.Adjective, Word.Noun],
                [Word.Noun, Word.Verb],
            ]);
    }
}
exports.getPattern = getPattern;
function getSalt(type, length) {
    var charset;
    switch (type) {
        case "string":
            charset = "abcdefghijklmnopqrstuvwxyz";
            break;
        case "number":
            charset = "0123456789";
            break;
        case "mixed":
        default:
            charset = "abcdefghijklmnopqrstuvwxyz0123456789";
    }
    return crypto_extra_1["default"].randomString(length, charset);
}
exports.getSalt = getSalt;
function default_1(opts) {
    if (opts === void 0) { opts = {}; }
    if (opts.char) {
        console.log("namor.generate(): `char` option has been renamed to `separator`");
        opts.separator = opts.char;
    }
    if (opts.numbers) {
        console.log("namor.generate(): `numbers` option has been renamed to `saltLength`/`saltType`");
        opts.saltLength = opts.numbers;
        opts.saltType = "number";
    }
    if (opts.manly) {
        console.log("namor.generate(): `manly` option is deprecated, use `subset` instead");
        opts.subset = "manly";
    }
    if (opts.words && (opts.words < 1 || opts.words > 4)) {
        throw new TypeError("Word count must be between 1-4");
    }
    opts.separator = opts.separator || "-";
    opts.words = Number(opts.words !== undefined ? opts.words : 2);
    opts.saltType = opts.saltType || "mixed";
    opts.saltLength = Number(opts.saltLength !== undefined ? opts.saltLength : 5);
    var dictionary = opts.subset ? _data_1["default"][opts.subset] : _data_1["default"];
    var salt = opts.saltLength > 0 ? getSalt(opts.saltType, opts.saltLength) : null;
    var name = getPattern(opts.words)
        .map(function (type) { return randomFromArray(dictionary[type]); })
        .concat([salt])
        .filter(Boolean)
        .join(opts.separator);
    if (name.length > 63) {
        throw new TypeError("Subdomains cannot be longer than 63 characters! Try shortening your trailing salt.");
    }
    return name;
}
exports["default"] = default_1;
