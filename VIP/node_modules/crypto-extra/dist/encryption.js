"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var crypto_1 = __importDefault(require("crypto"));
var utils_1 = require("./utils");
var ALGORITHM = "aes-256-ctr";
var HMAC_ALGORITHM = "sha256";
function getEncryptionKey(key) {
    var encryptionKey = key || process.env.ENCRYPTION_KEY;
    if (!encryptionKey) {
        throw new Error("No encryption key was found");
    }
    var cryptoKey = crypto_1["default"]
        .createHash("sha256")
        .update(encryptionKey)
        .digest();
    return cryptoKey;
}
function constantTimeCompare(val1, val2) {
    if (val1.length !== val2.length) {
        return false;
    }
    var sentinel = 0;
    for (var i = 0, len = val1.length; i < len; i++) {
        sentinel |= val1.charCodeAt(i) ^ val2.charCodeAt(i);
    }
    return sentinel === 0;
}
function encrypt(value, key) {
    var iv = Buffer.from(crypto_1["default"].randomBytes(16));
    var encryptionKey = Buffer.from(getEncryptionKey(key));
    var cipher = crypto_1["default"].createCipheriv(ALGORITHM, encryptionKey, iv);
    cipher.setEncoding("hex");
    cipher.write(utils_1.stringify(value));
    cipher.end();
    var cipherText = cipher.read();
    var hmac = crypto_1["default"].createHmac(HMAC_ALGORITHM, encryptionKey);
    hmac.update(cipherText);
    hmac.update(iv.toString("hex"));
    return cipherText + "$" + iv.toString("hex") + "$" + hmac.digest("hex");
}
exports.encrypt = encrypt;
function decrypt(value, key) {
    var cipher = value.split("$");
    var iv = Buffer.from(cipher[1], "hex");
    var encryptionKey = Buffer.from(getEncryptionKey(key));
    var hmac = crypto_1["default"].createHmac(HMAC_ALGORITHM, encryptionKey);
    hmac.update(cipher[0]);
    hmac.update(iv.toString("hex"));
    if (!constantTimeCompare(hmac.digest("hex"), cipher[2])) {
        throw new Error("Encrypted payload has been tampered with");
    }
    var decipher = crypto_1["default"].createDecipheriv(ALGORITHM, encryptionKey, iv);
    var decryptedText = decipher.update(cipher[0], "hex");
    var final = "" + decryptedText + decipher.final();
    try {
        return JSON.parse(final);
    }
    catch (err) {
        return final;
    }
}
exports.decrypt = decrypt;
