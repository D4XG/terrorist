{"version":3,"sources":["cookies.js"],"names":["DOM","require","isArray","Tough","Cookie","module","exports","Cookies","Array","constructor","dump","output","process","stdout","cookie","sort","cookieCompare","write","serialize","domain","path","select","map","cookieString","join","identifier","cookies","filter","TTL","name","key","pathMatch","domainMatch","a","b","length","set","params","value","expires","setExpires","hasOwnProperty","setMaxAge","secure","httpOnly","c","forEach","delete","push","index","indexOf","splice","deleteAll","update","httpHeader","headers","parse","defaultPath","HTMLDocument","prototype","__defineGetter__","defaultView","browser","location","hostname","pathname","__defineSetter__","toString"],"mappings":"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","file":"cookies.js","sourcesContent":["// See [RFC 2109](http://tools.ietf.org/html/rfc2109.html) and\n// [document.cookie](http://dev/loper.mozilla.org/en/document.cookie)\nconst DOM         = require('./dom');\nconst { isArray } = require('util');\nconst Tough       = require('tough-cookie');\nconst { Cookie }  = Tough;\n\n\n// Lists all available cookies.\nmodule.exports = class Cookies extends Array {\n\n  constructor() {\n    super();\n  }\n\n  // Used to dump state to console (debugging)\n  dump(output = process.stdout) {\n    for (let cookie of this.sort(Tough.cookieCompare))\n      output.write(`${cookie}\\n`);\n  }\n\n  // Serializes all selected cookies into a single string.  Used to generate a cookies header.\n  //\n  // domain - Request hostname\n  // path   - Request pathname\n  serialize(domain, path) {\n    return this\n      .select({ domain: domain, path: path })\n      .map(cookie => cookie.cookieString())\n      .join('; ');\n  }\n\n  // Returns all cookies that match the identifier (name, domain and path).\n  // This is used for retrieving cookies.\n  select(identifier) {\n    let cookies = this.filter(cookie => cookie.TTL() > 0); // eslint-disable-line new-cap\n    if (identifier.name)\n      cookies = cookies.filter(cookie => cookie.key === identifier.name);\n    if (identifier.path)\n      cookies = cookies.filter(cookie => Tough.pathMatch(identifier.path, cookie.path));\n    if (identifier.domain)\n      cookies = cookies.filter(cookie => Tough.domainMatch(identifier.domain, cookie.domain));\n    return cookies\n      .sort((a, b)=> b.domain.length - a.domain.length)\n      .sort(Tough.cookieCompare);\n  }\n\n  // Adds a new cookie, updates existing cookie (same name, domain and path), or\n  // deletes a cookie (if expires in the past).\n  set(params) {\n    const cookie = new Cookie({\n      key:    params.name,\n      value:  params.value,\n      domain: params.domain || 'localhost',\n      path:   params.path || '/'\n    });\n    if (params.expires)\n      cookie.setExpires(params.expires);\n    else if (params.hasOwnProperty('max-age'))\n      cookie.setMaxAge(params['max-age']);\n    cookie.secure   = !!params.secure;\n    cookie.httpOnly = !!params.httpOnly;\n\n    // Delete cookie before setting it, so we only store one cookie (per\n    // domain/path/name)\n    this\n      .filter(c   => c.domain === cookie.domain)\n      .filter(c   => c.path === cookie.path)\n      .filter(c   => c.key === cookie.key)\n      .forEach(c  => this.delete(c));\n    if (cookie.TTL() > 0) // eslint-disable-line new-cap\n      this.push(cookie);\n  }\n\n  // Delete the specified cookie.\n  delete(cookie) {\n    const index = this.indexOf(cookie);\n    if (~index)\n      this.splice(index, 1);\n  }\n\n  // Deletes all cookies.\n  deleteAll() {\n    this.splice(0, this.length);\n  }\n\n  // Update cookies with HTTP response\n  //\n  // httpHeader - Value of HTTP Set-Cookie header (string/array)\n  // domain     - Set from hostname\n  // path       - Set from pathname\n  update(httpHeader, domain, path) {\n    // One Set-Cookie is a string, multiple is an array\n    const headers = isArray(httpHeader) ? httpHeader : [httpHeader];\n    headers\n      .map(cookie => Cookie.parse(cookie))\n      .filter(cookie => cookie)\n      .forEach(cookie => {\n        cookie.domain = cookie.domain || domain;\n        cookie.path   = cookie.path || Tough.defaultPath(path);\n\n        // Delete cookie before setting it, so we only store one cookie (per\n        // domain/path/name)\n        this\n          .filter(c   => c.domain === cookie.domain)\n          .filter(c   => c.path === cookie.path)\n          .filter(c   => c.key === cookie.key)\n          .forEach(c  => this.delete(c));\n        if (cookie.TTL() > 0) // eslint-disable-line new-cap\n          this.push(cookie);\n      });\n  }\n\n};\n\n\n// Returns name=value pairs\nDOM.HTMLDocument.prototype.__defineGetter__('cookie', function() {\n  const { cookies } = this.defaultView.browser;\n  return cookies\n    .select({ domain: this.location.hostname, path: this.location.pathname })\n    .filter(cookie => !cookie.httpOnly)\n    .map(cookie    => `${cookie.key}=${cookie.value}`)\n    .join('; ');\n});\n\n// Accepts serialized form (same as Set-Cookie header) and updates cookie from\n// new values.\nDOM.HTMLDocument.prototype.__defineSetter__('cookie', function(cookie) {\n  const { cookies } = this.defaultView.browser;\n  cookies.update(cookie.toString(), this.location.hostname, this.location.pathname);\n});\n"]}