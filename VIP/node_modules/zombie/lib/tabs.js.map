{"version":3,"sources":["tabs.js"],"names":["_","require","createHistory","module","exports","Tabs","Array","constructor","browser","_current","_browser","length","Object","defineProperty","enumerable","writable","current","nameOrWindow","window","find","_indexOf","sameWindow","emit","propertyIsEnumerable","byName","name","index","open","options","named","toString","url","location","active","_eventLoop","setActiveWindow","push","close","closeAll","tabs","slice","tab","dump","output","process","stdout","write","href","map","_globalProxy","indexOf","_closed","splice","a","b"],"mappings":"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","file":"tabs.js","sourcesContent":["// Tab management.\n\nconst _             = require('lodash');\nconst createHistory = require('./history');\n\n\nmodule.exports = class Tabs extends Array {\n\n  constructor(browser) {\n    super();\n    this._current = null;\n    this._browser = browser;\n    this.length   = 0;\n    Object.defineProperty(this, 'length',   { enumerable: false, writable: true });\n    Object.defineProperty(this, '_browser', { enumerable: false, writable: true });\n    Object.defineProperty(this, '_current', { enumerable: false, writable: true });\n  }\n\n  // Get the currently open tab\n  get current() {\n    return this._current;\n  }\n\n  // Sets the currently open tab\n  // - Name   - Pick existing window with this name\n  // - Number - Pick existing window from tab position\n  // - Window - Use this window\n  set current(nameOrWindow) {\n    const window = this.find(nameOrWindow);\n    if (this._indexOf(window) < 0)\n      return;\n    if (!Tabs.sameWindow(this._current, window)) {\n      if (this._current)\n        this._browser.emit('inactive', this._current);\n      this._current = window;\n      this._browser.emit('active', this._current);\n    }\n  }\n\n  // Returns window by index or name. Use this for window names that shadow\n  // existing properties (e.g. tabs['open'] is a function, use\n  find(nameOrWindow) {\n    if (this.propertyIsEnumerable(nameOrWindow))\n      return this[nameOrWindow];\n    const byName = _.find(this, { name: nameOrWindow });\n    if (byName)\n      return byName;\n    if (this._indexOf(nameOrWindow) >= 0)\n      return nameOrWindow;\n    return null;\n  }\n\n  // Index of currently selected tab.\n  get index() {\n    return this._indexOf(this._current);\n  }\n\n  // Opens and returns a tab.  If an open window by the same name already exists,\n  // opens this window in the same tab.  Omit name or use '_blank' to always open\n  // a new tab.\n  //\n  // name    - Window name (optional)\n  // opener  - Opening window (window.open call)\n  // referer - Referrer\n  // url     - Set document location to this URL upon opening\n  // html    - Document contents (browser.load)\n  open(options = {}) {\n\n    // If name window in open tab, reuse that tab. Otherwise, open new window.\n    const named = options.name && this.find(options.name.toString());\n    if (named) {\n      // Select this as the currently open tab. Changing the location would then\n      // select a different window.\n      this._current = named;\n      if (options.url)\n        this._current.location = options.url;\n      return this._current;\n    }\n\n    // When window changes we need to change tab slot. We can't keep the index\n    // around, since tab order changes, so we look up the currently known\n    // active window and switch that around.\n    let active = null;\n    const open = createHistory(this._browser, (window)=> {\n      // Focus changes to different window, make it the active window\n      if (!Tabs.sameWindow(window, active)) {\n        const index = this._indexOf(active);\n        if (index >= 0)\n          this[index] = window;\n        this.current = active = window;\n      }\n      if (window)\n        this._browser._eventLoop.setActiveWindow(window);\n    });\n\n    const name = options.name === '_blank' ? '' : (options.name || '');\n    options.name = name;\n    const window = open(options);\n    this.push(window);\n    if (name && (this.propertyIsEnumerable(name) || !this[name]))\n      this[name] = window;\n    // Select this as the currently open tab\n    this.current = active = window;\n    return window;\n  }\n\n  // Close an open tab.\n  //\n  // With no argument, closes the currently open tab (tabs.current).\n  //\n  // Argument can be the window, window name or tab position (same as find).\n  close(nameOrWindow) {\n    const window = nameOrWindow ?  this.find(nameOrWindow) : this._current;\n    if (this._indexOf(window) >= 0)\n      window.close();\n  }\n\n  // Closes all open tabs/windows.\n  closeAll() {\n    const tabs = this.slice();\n    this._current = null;\n    for (let tab of tabs)\n      tab.close();\n  }\n\n  // Dump list of all open tabs to stdout or output stream.\n  dump(output = process.stdout) {\n    if (this.length === 0) {\n      output.write('No open tabs.\\n');\n      return;\n    }\n    for (let tab of this)\n      output.write(`Window ${tab.name || 'unnamed'} open to ${tab.location.href}\\n`);\n  }\n\n\n  // Find the position of this window in the tabs array\n  _indexOf(window) {\n    if (!window)\n      return -1;\n    return this.slice().map(tab => tab._globalProxy).indexOf(window._globalProxy);\n  }\n\n  // Called when window closed to remove it from tabs list.\n  _closed(window) {\n    const index = this._indexOf(window);\n    if (index >= 0) {\n      this._browser.emit('inactive', window);\n\n      this.splice(index, 1);\n      if (this.propertyIsEnumerable(window.name))\n        delete this[window.name];\n\n      // If we closed the currently open tab, need to select another window.\n      if (Tabs.sameWindow(window, this._current)) {\n        // Don't emit inactive event for closed window.\n        this._current = this[index - 1] || this[0];\n        if (this._current)\n          this._browser.emit('active', this._current);\n      }\n    }\n\n  }\n\n  // Determine if two windows are the same\n  static sameWindow(a, b) {\n    return a && b && a._globalProxy === b._globalProxy;\n  }\n};\n"]}