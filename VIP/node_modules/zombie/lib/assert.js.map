{"version":3,"sources":["assert.js"],"names":["assert","require","isRegExp","URL","Utils","assertMatch","actual","expected","message","test","deepEqual","module","exports","Assert","constructor","browser","cookie","identifier","getCookie","redirected","status","code","equal","success","url","absolute","resolve","location","href","parse","key","value","defaultValue","attribute","selector","name","elements","queryAll","length","element","getAttribute","exactly","count","arguments","atLeast","atMost","hasClass","classNames","className","split","indexOf","join","hasNoClass","array","sort","style","getPropertyValue","input","link","text","matchingText","filter","textContent","trim","matchedRegexp","matchedURL","map","elem","replace","hasFocus","activeElement","body","evaluate","expression","global","window"],"mappings":"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","file":"assert.js","sourcesContent":["// Browser assertions convenience.\n\nconst assert        = require('assert');\nconst { isRegExp }  = require('util');\nconst URL           = require('url');\nconst Utils         = require('jsdom/lib/jsdom/utils');\n\n\n// Used to assert that actual matches expected value, where expected may be a function or a string.\nfunction assertMatch(actual, expected, message) {\n  if (isRegExp(expected))\n    assert(expected.test(actual), message || `Expected \"${actual}\" to match \"${expected}\"`);\n  else if (typeof expected === 'function')\n    assert(expected(actual), message);\n  else\n    assert.deepEqual(actual, expected, message);\n}\n\n\nmodule.exports = class Assert {\n\n  constructor(browser) {\n    this.browser = browser;\n  }\n\n\n  // -- Location/response --\n\n  // Asserts that a cookie with the given name has the expected value.\n  //\n  // identifier - Cookie name or name/domain/path (see getCookie)\n  // expected   - Expected value (null to test cookie is not set)\n  // message    - Assert message if cookie does not have expected value\n  cookie(identifier, expected = null, message = null) {\n    const actual = this.browser.getCookie(identifier);\n    assertMatch(actual, expected,\n                message || `Expected cookie ${JSON.stringify(identifier)} to have the value \"${expected}\", found \"${actual}\"`);\n  }\n\n  // Asserts that browser was redirected when retrieving the current page.\n  redirected(message) {\n    assert(this.browser.redirected, message);\n  }\n\n  // Assert that the last page load returned the expected status code.\n  status(code, message) {\n    assert.equal(this.browser.status, code, message);\n  }\n\n  // Assert that the last page load returned status code 200.\n  success(message) {\n    assert(this.browser.success, message);\n  }\n\n  // Asserts that current page has the expected URL.\n  //\n  // Expected value can be a String, RegExp, Function or an object, in which case\n  // object properties are tested against the actual URL (e.g. pathname, host,\n  // query).\n  url(expected, message) {\n    if (typeof expected === 'string') {\n      const absolute = URL.resolve(this.browser.location.href, expected);\n      assertMatch(this.browser.location.href, absolute, message);\n    } else if (isRegExp(expected) || typeof expected === 'function')\n      assertMatch(this.browser.location.href, expected, message);\n    else {\n      const url = URL.parse(this.browser.location.href, true);\n      for (let key in expected) {\n        let value = expected[key];\n        // Gracefully handle default values, e.g. document.location.hash for\n        // \"/foo\" is \"\" not null, not undefined.\n        let defaultValue = (key === 'port') ? 80 : null;\n        assertMatch(url[key] || defaultValue, value || defaultValue, message);\n      }\n    }\n  }\n\n\n  // -- Document contents --\n\n  // Assert the named attribute of the selected element(s) has the expected value.\n  attribute(selector, name, expected = null, message = null) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector \"${selector}\" to return one or more elements`);\n    for (let element of elements) {\n      let actual = element.getAttribute(name);\n      assertMatch(actual, expected, message);\n    }\n  }\n\n  // Assert that element matching selector exists.\n  element(selector, message) {\n    this.elements(selector, { exactly: 1 }, message);\n  }\n\n  // Assert how many elements matching selector exist.\n  //\n  // Count can be an exact number, or an object with the properties:\n  // atLeast - Expect to find at least that many elements\n  // atMost  - Expect to find at most that many elements\n  // exactly - Expect to find exactly that many elements\n  //\n  // If count is unspecified, defaults to at least one.\n  elements(selector, count, message) {\n    const elements = this.browser.queryAll(selector);\n    if (arguments.length === 1)\n      this.elements(selector, { atLeast: 1});\n    else if (Number.isInteger(count))\n      this.elements(selector, { exactly: count }, message);\n    else {\n      if (Number.isInteger(count.exactly))\n        assert.equal(elements.length, count.exactly,\n                     message || `Expected ${count.exactly} elements matching \"${selector}\", found ${elements.length}`);\n      if (Number.isInteger(count.atLeast))\n        assert(elements.length >= count.atLeast,\n               message || `Expected at least ${count.atLeast} elements matching \"${selector}\", found only ${elements.length}`);\n      if (Number.isInteger(count.atMost))\n        assert(elements.length <= count.atMost,\n               message || `Expected at most ${count.atMost} elements matching \"${selector}\", found ${elements.length}`);\n    }\n  }\n\n  // Asserts the selected element(s) has the expected CSS class.\n  hasClass(selector, expected, message) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector \"${selector}\" to return one or more elements`);\n    for (let element of elements) {\n      let classNames = element.className.split(/\\s+/);\n      assert(~classNames.indexOf(expected),\n             message || `Expected element \"${selector}\" to have class \"${expected}\", found \"${classNames.join(', ')}\"`);\n    }\n  }\n\n  // Asserts the selected element(s) doest not have the expected CSS class.\n  hasNoClass(selector, expected, message) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector \"${selector}\" to return one or more elements`);\n    for (let element of elements) {\n      let classNames = element.className.split(/\\s+/);\n      assert(classNames.indexOf(expected) === -1,\n             message || `Expected element \"${selector}\" to not have class \"${expected}\", found \"${classNames.join(', ')}\"`);\n    }\n  }\n\n  // Asserts the selected element(s) has the expected class names.\n  className(selector, expected, message) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector \"${selector}\" to return one or more elements`);\n    const array    = expected.split(/\\s+/).sort().join(' ');\n    for (let element of elements) {\n      let actual = element.className.split(/\\s+/).sort().join(' ');\n      assertMatch(actual, array,\n                  message || `Expected element \"${selector}\" to have class \"${expected}\", found \"${actual}\"`);\n    }\n  }\n\n  // Asserts the selected element(s) has the expected value for the named style\n  // property.\n  style(selector, style, expected = null, message = null) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector \"${selector}\" to return one or more elements`);\n    for (let element of elements) {\n      let actual = element.style.getPropertyValue(style);\n      assertMatch(actual, expected,\n                  message || `Expected element \"${selector}\" to have style ${style} value of \"${expected}\", found \"${actual}\"`);\n    }\n  }\n\n  // Asserts that selected input field (text field, text area, etc) has the expected value.\n  input(selector, expected = null, message = null) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector \"${selector}\" to return one or more elements`);\n    for (let element of elements)\n      assertMatch(element.value, expected, message);\n  }\n\n  // Asserts that a link exists with the given text and URL.\n  link(selector, text, url, message) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, message || `Expected selector \"${selector}\" to return one or more elements`);\n    const matchingText = elements.filter(element => element.textContent.trim() === text);\n    if (isRegExp(url)) {\n      const matchedRegexp = matchingText.filter(element => url.test(element.href));\n      assert(matchedRegexp.length, message || 'Expected at least one link matching the given text and URL');\n    } else {\n      const absolute    = URL.resolve(this.browser.location.href, url);\n      const matchedURL  = matchingText.filter(element => element.href === absolute);\n      assert(matchedURL.length, message || 'Expected at least one link matching the given text and URL');\n    }\n  }\n\n\n  // Assert that text content of selected element(s) matches expected string.\n  //\n  // You can also call this with a regular expression, or a function.\n  text(selector, expected, message) {\n    const elements = this.browser.queryAll(selector);\n    assert(elements.length, `Expected selector \"${selector}\" to return one or more elements`);\n    const actual = elements\n      .map(elem => elem.textContent)\n      .join('')\n      .trim()\n      .replace(/\\s+/g, ' ');\n    assertMatch(actual, expected || '', message);\n  }\n\n\n  // -- Window --\n\n  // Asserts that selected element has the focus.\n  hasFocus(selector, message) {\n    if (selector) {\n      const elements = this.browser.queryAll(selector);\n      assert.equal(elements.length, 1,\n                   message || `Expected selector \"${selector}\" to return one element`);\n      assert.equal(this.browser.activeElement, elements[0],\n                   message || `Expected element \"${selector}\" to have the focus'`);\n    } else\n      assert.equal(this.browser.activeElement, this.browser.body,\n                   message || 'Expected no element to have focus');\n  }\n\n\n  // -- JavaScript --\n\n  // Evaluates Javascript expression and asserts value.  With one argument,\n  // asserts that the expression evaluates to (JS) true.\n  evaluate(expression, expected, message) {\n    const actual = this.browser.evaluate(expression);\n    if (arguments.length === 1)\n      assert(actual);\n    else\n      assertMatch(actual, expected, message);\n  }\n\n  // Asserts that the global (window) property name has the expected value.\n  global(name, expected, message) {\n    const actual = this.browser.window[name];\n    if (arguments.length === 1)\n      assert(actual);\n    else\n      assertMatch(actual, expected,\n                  message || `Expected global ${name} to have the value \"${expected}\", found \"${actual}\"`);\n  }\n\n};\n"]}