{"version":3,"sources":["dom/focus.js"],"names":["DOM","require","idlUtils","FOCUS_ELEMENTS","HTMLDocument","prototype","__defineGetter__","_inFocus","body","setFocus","document","element","inFocus","inputElementImpl","implForWrapper","onblur","createEvent","initEvent","dispatchResult","dispatchEvent","_blur","onfocus","_focus","defaultView","browser","emit","HTMLElement","focus","blur","CONTROLS","HTMLInputElement","HTMLSelectElement","HTMLTextAreaElement","HTMLButtonElement","HTMLAnchorElement","forEach","elementType","ownerDocument","setAttribute","name","value","call","indexOf","tagName","INPUTS","event","target","_focusValue","focusValue","change"],"mappings":"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","file":"focus.js","sourcesContent":["// Support for element focus.\n\n\nconst DOM = require('./index');\nconst { idlUtils }    = require('./impl');\n\nconst FOCUS_ELEMENTS = ['INPUT', 'SELECT', 'TEXTAREA', 'BUTTON', 'ANCHOR'];\n\n\n// The element in focus.\n//\n// If no element has the focus, return the document.body.\nDOM.HTMLDocument.prototype.__defineGetter__('activeElement', function() {\n  return this._inFocus || this.body;\n});\n\n// Change the current element in focus (or null for blur)\nfunction setFocus(document, element) {\n  const inFocus = document._inFocus;\n  if (element !== inFocus) {\n    const inputElementImpl = idlUtils.implForWrapper(element || inFocus);\n    if (inFocus) {\n      const onblur = document.createEvent('HTMLEvents');\n      onblur.initEvent('blur', false, false);\n      const dispatchResult = inFocus.dispatchEvent(onblur);\n      inFocus._blur && inFocus._blur(onblur);\n    }\n    if (element) { // null to blur\n      const onfocus = document.createEvent('HTMLEvents');\n      onfocus.initEvent('focus', false, false);\n      const dispatchResult = element.dispatchEvent(onfocus);\n      element._focus && element._focus(onfocus);\n      document._inFocus = element;\n      document.defaultView.browser.emit('focus', element);\n    }\n  }\n}\n\n// All HTML elements have a no-op focus/blur methods.\nDOM.HTMLElement.prototype.focus = function() {\n};\nDOM.HTMLElement.prototype.blur = function() {\n};\n\n// Input controls have active focus/blur elements.  JSDOM implements these as\n// no-op, so we have to over-ride each prototype individually.\nconst CONTROLS = [DOM.HTMLInputElement, DOM.HTMLSelectElement, DOM.HTMLTextAreaElement, DOM.HTMLButtonElement, DOM.HTMLAnchorElement];\n\nCONTROLS.forEach(function(elementType) {\n  elementType.prototype.focus = function() {\n    setFocus(this.ownerDocument, this);\n  };\n\n  elementType.prototype.blur = function() {\n    setFocus(this.ownerDocument, null);\n  };\n\n  // Capture the autofocus element and use it to change focus\n  const setAttribute = elementType.prototype.setAttribute;\n  elementType.prototype.setAttribute = function(name, value) {\n    setAttribute.call(this, name, value);\n    if (name === 'autofocus') {\n      const document = this.ownerDocument;\n      if (~FOCUS_ELEMENTS.indexOf(this.tagName) && !document._inFocus)\n        this.focus();\n    }\n  };\n});\n\n\n// When changing focus onto form control, store the current value.  When changing\n// focus to different control, if the value has changed, trigger a change event.\nconst INPUTS = [DOM.HTMLInputElement, DOM.HTMLTextAreaElement, DOM.HTMLSelectElement];\n\nINPUTS.forEach(function(elementType) {\n  elementType.prototype._focus = function(event) {\n    const element       = event.target;\n    element._focusValue = element.value || '';\n  };\n\n  elementType.prototype._blur = function(event) {\n    const element     = event.target;\n    const focusValue  = element._focusValue;\n    if (focusValue !== element.value) { // null == undefined\n      const change = element.ownerDocument.createEvent('HTMLEvents');\n      change.initEvent('change', false, false);\n      element.dispatchEvent(change);\n    }\n  };\n});\n\n\n// HTMLForm listeners\nconst _blur = function(event) {\n  const element     = event.target;\n  const focusValue  = element._focusValue;\n  if (focusValue !== element.value) { // null == undefined\n    const change = element.ownerDocument.createEvent('HTMLEvents');\n    change.initEvent('change', false, false);\n    element.dispatchEvent(change);\n  }\n}\n\nconst _focus = function(event) {\n  const element       = event.target;\n  element._focusValue = element.value || '';\n};\n"]}